---
- hosts: all
  gather_facts: False

  tasks:
  - name: install python 2
    raw: test -e /usr/bin/python || (apt -y update && apt install -y python)
    register: test
    changed_when: test.stdout

  - name: remove require tty
    lineinfile: regexp="^\s+\w+\s+requiretty" dest=/etc/sudoers state=absent


- name: Prepare nodes
  hosts: all
  pre_tasks:
  - name: update apt cache if needed
    apt: update_cache=yes cache_valid_time=3600

  - name: add git ppa
    apt_repository:
      repo: ppa:git-core/ppa
      state: present

  - name: install common packages
    apt: pkg={{ item }} state=latest
    with_items:
    - git
    - htop
    - unzip
    - python-pip
    - acl
    - build-essential
    - python-pkg-resources
    - python-setuptools

  - name: install python libs
    pip:
      name: "{{ item }}"
    with_items:
    - passlib

  - name: Add stationeers user
    user:
      uid: "{{ app_user }}"
      name: stationeers
      shell: /bin/bash

  tasks:
  - name: incude custom variables
    include_vars:
      file: "{{ var_file }}"
    when: var_file is defined

  - name: ensure ssh directory
    file:
      path: "/home/stationeers/.ssh"
      state: directory
      mode: 0700
      group: stationeers
      owner: stationeers

  - name: ensure deploy ssh keys
    copy:
      src: "{{ item }}"
      dest: "/home/stationeers/.ssh/{{ item }}"
      owner: stationeers
      group: stationeers
      mode: 0600
    loop:
      - id_ed25519
      - id_ed25519.pub

  - name: ensure deploy ssh config
    copy:
      src: "ssh_cfg"
      dest: "/home/stationeers/.ssh/config"
      owner: stationeers
      group: stationeers
      mode: 0400

- name: Prepare certificates
  hosts: all
  pre_tasks:
  - name: certificates direcotry
    file:
      path: "{{ cert_dir }}"
      state: directory
      mode: 0755

  - name: create self-signed certificate
    command: >
      openssl req -x509 -nodes -subj '/CN={{ item }}' -days 365
      -newkey rsa:4096 -sha256 -keyout {{ cert_dir }}/{{ item }}.key -out {{ cert_dir }}/{{ item }}.crt
    args:
      creates: "{{ cert_dir }}/{{ item }}.crt"
    loop:
      - "{{ root_domain }}"
      - "tc.{{ root_domain }}"

- name: TeamCity
  hosts: all
  roles:
    - gortc.nginx
  vars:
    fqdn: tc.{{ root_domain }}
    nginx_vhosts:
      - listen: "443 ssl http2"
        server_name: "{{ fqdn }}"
        state: "present"
        file: "{{ fqdn }}.conf"
        template: "{{ nginx_vhost_template }}"
        acme: true
        extra_parameters: |
          gzip on;
          gzip_types text/plain image/svg+xml application/font-woff text/css application/xml;
          ssl_certificate       {{ cert_dir }}/{{ fqdn }}.crt;
          ssl_certificate_key   {{ cert_dir }}/{{ fqdn }}.key;
          ssl_protocols         TLSv1.1 TLSv1.2;
          ssl_stapling on;
          ssl_stapling_verify on;
          location / {
            proxy_pass          http://127.0.0.1:8111; # full internal address
            proxy_http_version  1.1;
            proxy_set_header    Host $server_name:$server_port;
            proxy_set_header    X-Forwarded-Host $http_host;    # necessary for proper absolute redirects and TeamCity CSRF check
            proxy_set_header    X-Forwarded-Proto $scheme;
            proxy_set_header    X-Forwarded-For $remote_addr;
            proxy_set_header    Upgrade $http_upgrade;
            proxy_set_header    Connection $connection_upgrade; # WebSocket support
            proxy_set_header    X-Forwarded-SSL on;
          }
      - listen: "80"
        acme: true
        server_name: "{{ fqdn }}"
        extra_parameters: |
          location / {
            return 301 https://{{ fqdn }}$request_uri;
          }
        filename: "{{ fqdn }}.80.conf"

# Playbook for Stationeers web server.
# Ubuntu 18.04 is expected.
- hosts: all
  roles:
  - gortc.nginx
  - geerlingguy.docker
  vars:
    pontoon_version: v0.1.14
    docker_install_compose: False  # will be installed via pip
    fqdn: "{{ root_domain }}"

    # Machine translation
    microsoft_translator_api_key: !vault |
      $ANSIBLE_VAULT;1.1;AES256
      38623064336130613133616561316532343363643762656135643161616437306134626135643633
      3936366362653562616431633561633330376366366163310a646265353965396533656136366434
      33393632333434303138663665633032626132326662646334353761643363633465323862366463
      6133626465343631350a336337383266396538326664356434356562376231366637313930663766
      32636534363165313130633639326564666635663161346138633732313563363732616664633065
      6366363939643534376465636133393532363834376464303066

    # OAuth creds for Discord.
    discord_client_id: 493582008325505044
    discord_secret_key: !vault |
      $ANSIBLE_VAULT;1.1;AES256
      39333834653334383763636565646366666439663661313836656166353266343566323337633930
      3637316238346231663666616332353662356235376532610a333934626664383530643662326534
      63346666643431636333353565663436616364663536303138616536313761356163363066373638
      3230643464303964630a643532623331633063346262323135316534333565316235303464323334
      34313737303562316630383165333663323665626262326531343362393939626664363631656166
      3034343762303433363562383632326336616235616364303935

    nginx_vhosts:
    - listen: "443 ssl http2"
      server_name: "{{ fqdn }}"
      state: "present"
      file: "stationeers.conf"
      template: "{{ nginx_vhost_template }}"
      acme: true
      extra_parameters: |
        gzip on;
        gzip_types text/plain text/html image/svg+xml application/font-woff text/css application/xml;
        location / {
          proxy_pass_request_headers on;
          proxy_set_header Host $host;
          proxy_pass http://localhost:8000;
          http2_push_preload on;
          proxy_set_header X-Forwarded-Proto https;
        }
        ssl_certificate       {{ cert_dir }}/{{ fqdn }}.crt;
        ssl_certificate_key   {{ cert_dir }}/{{ fqdn }}.key;
        ssl_protocols         TLSv1.1 TLSv1.2;
    - listen: "80"
      acme: true
      server_name: "{{ fqdn }}"
      extra_parameters: |
        location / {
          return 301 https://{{ fqdn }}$request_uri;
        }
      filename: "stationeers.80.conf"

  tasks:
  - name: install docker python libs
    pip:
      name: "{{ item }}"
    with_items:
    - docker-compose
    - docker

  - name: copy env file
    template:
      src: webapp.env
      dest: /home/stationeers/.env

  - name: ensure data directories
    file:
      path: "/home/stationeers/media"
      state: directory
      mode: 0755
      group: stationeers
      owner: stationeers

  - name: ensure db directories
    file:
      path: "/home/stationeers/db/{{ item }}"
      state: directory
      mode: 0755
      group: "{{ postgres_user }}"
      owner: "{{ postgres_user }}"
    loop:
      - data
      - logs

  - name: "service"
    register: output
    tags:
    - web
    docker_service:
      project_name: st
      definition:
        version: "3"
        services:
          # Pontoon base image.
          base:
            image: gortc/pontoon-base
            env_file:
            - /home/stationeers/.env

          # Web app
          webapp:
            image: "gortc/pontoon:{{ pontoon_version }}"
            env_file:
            - /home/stationeers/.env
            volumes:
            - /home/stationeers/.ssh:/home/app/.ssh
            - /home/stationeers/media:/app/media
            environment:
            - LOCAL_USER_ID={{ app_user }}
            depends_on:
            - postgresql
            - rabbit
            command: ["/app/run_webapp.sh"]
            ports:
            - "8000:8000"
            - "3000:3000"

          # Worker
          worker:
            image: "gortc/pontoon:{{ pontoon_version }}"
            env_file:
            - /home/stationeers/.env
            volumes:
            - /home/stationeers/.ssh:/home/app/.ssh
            - /home/stationeers/media:/app/media
            environment:
            - LOCAL_USER_ID={{ app_user }}
            depends_on:
            - postgresql
            - webapp
            - rabbit
            command: ["/app/run_worker.sh"]

          postgresql:
            image: gortc/pontoon-psql
            environment:
            # Create the superuser account
            - POSTGRES_USER=pontoon
            - POSTGRES_PASSWORD=asdf
            - POSTGRES_DB=pontoon
            - PGDATA=/data
            volumes:
              - /home/stationeers/db/data:/data

          # Celery broker
          rabbit:
            image: "rabbitmq:3"
            hostname: "rabbit"
            environment:
              RABBITMQ_DEFAULT_USER: "guest"
              RABBITMQ_DEFAULT_VHOST: "/"
            ports:
              - "15672:15672"
              - "5672:5672"
  - debug:
      var: output

  - name: install services
    template:
      src: pontoon-sync.service
      dest: /etc/systemd/system/pontoon-sync.service

  - name: install timers
    template:
      src: pontoon-sync.timer
      dest: /etc/systemd/system/pontoon-sync.timer

  - name: ensure that timer is enabled and started
    systemd:
      name: "pontoon-sync.timer"
      enabled: yes
      state: started
      daemon_reload: yes

# Install Steam
- name: Steam
  hosts: all
  tags:
  - steam
  vars:
    steam_password: !vault |
      $ANSIBLE_VAULT;1.1;AES256
      64373935636538316232336334323737393137363235343834373233646631353066306464353666
      3062313062313763323938383132383232343137656338330a643234613162623031383964326439
      37313734643939326564363934323332306230313933393839646430633433313739633033643139
      3765646566656332650a343838653766316166376462633230373663643363353566626138323031
      6566
  tasks:
  - name: install steam packages
    apt: pkg={{ item }} state=latest
    with_items:
    - file
    - bzip2
    - gzip
    - unzip
    - bsdmainutils
    - python
    - util-linux
    - ca-certificates
    - binutils
    - bc
    - jq
    - lib32gcc1
    - libstdc++6
    - libstdc++6:i386
    - libcurl4-gnutls-dev:i386

  - name: steam direcotry
    file:
      path: /home/stationeers/steam
      state: directory
      mode: 0755
      group: stationeers
      owner: stationeers

  - name: download steam
    unarchive:
      src: http://media.steampowered.com/installer/steamcmd_linux.tar.gz
      dest: /home/stationeers/steam
      remote_src: yes
      creates: /home/stationeers/steam/steamcmd.sh
      group: stationeers
      owner: stationeers

  - name: copy update script
    template:
      src: update-game.sh
      dest: /home/stationeers/update-game.sh
      group: stationeers
      owner: stationeers

  - name: add resources repo
    git:
      repo: git@github.com:st-l10n/resources.git
      dest: /home/stationeers/resources
      clone: yes
      update: no
    become: yes
    become_user: stationeers

  - name: install services
    template:
      src: game-sync.service
      dest: /etc/systemd/system/game-sync.service

  - name: install timers
    template:
      src: game-sync.timer
      dest: /etc/systemd/system/game-sync.timer

  - name: ensure that timer is enabled and started
    systemd:
      name: "game-sync.timer"
      enabled: yes
      state: started
      daemon_reload: yes

# Enable LetsEncrypt.
- name: LetsEncrypt certificates
  hosts: lego
  tags:
    - certs
  vars:
    cf_api_key: !vault |
      $ANSIBLE_VAULT;1.1;AES256
      38393836326365613430616232623633636437623935666463623064323032396232326364613661
      3966303439323363316231316237373631613331323533340a663432323931323432353633663437
      62636139356137636137393832376163313538613062313436393962373531323166313432373830
      6332313337636362340a313135343335306533363562636336653864643464623937653337376231
      39313132313933393264313032306138363330333763623332366135636533333764393463303463
      3261383932363230333933633565653762663163613332393530

    cf_api_email: !vault |
      $ANSIBLE_VAULT;1.1;AES256
      38336130363633336432613737623534363937356465623735663236636466303166353032373565
      3864393636383836343666313861653934363433653462370a303538663239623165616332346134
      31323934333730383362366235663837616638626636333463633635646133633731373538636530
      3538363363393932660a663938356233383331326165633939373438363264646634616134343630
      6264
    domains:
      - "{{ root_domain }}"
      - "tc.{{ root_domain }}"
  handlers:
    - name: reload nginx
      service: name=nginx state=reloaded
  tasks:
    - name: acme direcotry
      file:
        path: "{{ nginx_acme_dir }}"
        state: directory
        mode: 0755

    - name: download lego
      unarchive:
        src: https://github.com/xenolf/lego/releases/download/{{ lego_version }}/lego_{{ lego_version }}_linux_amd64.tar.gz
        dest: /usr/local/bin
        remote_src: yes
        creates: /usr/local/bin/lego

    - name: install lego services
      template:
        src: lego.service
        dest: /etc/systemd/system/lego@{{ item }}.service
      loop: "{{ domains }}"

    - name: install lego timers
      template:
        src: lego.timer
        dest: /etc/systemd/system/lego@{{ item }}.timer
      loop: "{{ domains }}"

    - name: retrieve letsencrypt certificates
      command: /usr/local/bin/lego -a -s {{ lego_server }} -d={{ item }} -m={{ lego_email }} --dns cloudflare --path={{ lego_dir }} run
      args:
        creates: "{{ cert_dir }}/{{ item }}.json"
      notify: reload nginx
      loop: "{{ domains }}"
      environment:
        CLOUDFLARE_EMAIL: "{{ cf_api_email }}"
        CLOUDFLARE_API_KEY: "{{ cf_api_key }}"
#
#    - name: check lego certificate
#      stat:
#        path: "{{ cert_dir }}/{{ item }}.json"
#      register: "lego_cert"
#      loop: "{{ domains }}"
#
#    - assert:
#        that:
#          - "{{ item }}.stat.exists"
#      loop: "{{ lego_cert.results }}"

    - name: ensure that lego timer is enabled and started
      systemd:
        name: "lego@{{ item }}.timer"
        enabled: yes
        state: started
        daemon_reload: yes
      loop: "{{ domains }}"
